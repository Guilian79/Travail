/*!
 * @license MIT (https://github.com/geotrev/undernet/blob/master/LICENSE)
 * Undernet v8.1.0 (https://undernet.io)
 * Copyright 2017-2020 George Treviranus
 */
! function(t) { "function" == typeof define && define.amd ? define(t) : t() }((function() {
    "use strict";

    function t(e) { return (t = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) { return typeof t } : function(t) { return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t })(e) }

    function e(t, e) { if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function") }

    function i(t, e) {
        for (var i = 0; i < e.length; i++) {
            var n = e[i];
            n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(t, n.key, n)
        }
    }

    function n(t, e, n) { return e && i(t.prototype, e), n && i(t, n), t }
    var a = 16,
        o = 9,
        s = 38,
        r = 40,
        l = { FOCUSABLE_TAGS: ["a", "button", "input", "object", "select", "textarea", "[tabindex]"], KEYBOARD_CLASS: "using-keyboard", NOT_VISUALLY_HIDDEN_CLASS: ":not(.is-visually-hidden)", TABINDEX: "tabindex" },
        c = "keydown",
        d = "click",
        h = "blur",
        u = "createFocusTrap must be given one or both of: first parameter (as selector string) and/or options.children (array of elements).",
        v = "Invalid data type given to options.matchers for createFocusTrap. Expected: Array.",
        _ = function(t) { return "Invalid matcher given to options.matchers for createFocusTrap. Expected: String. Recieved: ".concat(t, ".") },
        f = "Invalid value given to options.matchers for createFocusTrap; value must be an array with at least one selector string",
        p = function(t) { var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : document; return Array.apply(null, e.querySelectorAll(t)) },
        g = function(t) {
            var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : l.FOCUSABLE_TAGS,
                i = e.map((function(e) { return "".concat(t, " ").concat(e).concat(l.NOT_VISUALLY_HIDDEN_CLASS) })).join(", ");
            return p(i)
        },
        y = "undefined" != typeof window,
        b = function(t) { return "string" == typeof t },
        m = function(t) { return "function" == typeof t },
        A = function() {
            var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
            if (y) {
                var e = t.id,
                    i = t.attribute,
                    n = t.thisArg;
                if (e && b(e)) {
                    var a = document.querySelector("[".concat(i, "='").concat(e, "']"));
                    if (!a) return;
                    var o = [a].filter(n._validate)[0];
                    if (!o) return;
                    n._components.push(o)
                } else if (!e && !n._components.length) {
                    var s = p("[".concat(i, "]"));
                    if (!s.length) return;
                    var r = s.filter(n._validate);
                    n._components = n._components.concat(r)
                }
            }
        },
        C = function() {
            var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
            if (y) {
                var e = t.id,
                    i = t.attribute,
                    n = t.thisArg,
                    a = t.activeNodeKey,
                    o = t.cancelActiveFn;
                if (e && b(e)) {
                    var s, r = n._components.filter((function(t, n) { return t.getAttribute(i) === e && (s = n, !0) }))[0];
                    if (!r) return;
                    n[a] && r === n[a] && m(o) && n[o](), n._teardown(r), n._components.splice(s, 1)
                } else !e && n._components.length && (n[a] && m(o) && n[o](), n._components.forEach(n._teardown), n._components = [])
            }
        },
        w = function(t) { var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "error"; return console[e](t) },
        E = function(e) {
            var i = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
            if (y) {
                var n = i.useArrows,
                    d = i.children,
                    h = i.matchers,
                    p = void 0 === h ? l.FOCUSABLE_TAGS : h;
                if (e || d.length) {
                    if (Array.isArray(p)) {
                        if (p.length) { var b = !1; if (p.forEach((function(e) { var i = t(e); "string" !== i && (w(_(i)), b = !0) })), b) return } else if (!p.length) return void w(f);
                        var m = d && d.length ? d : g(e, p),
                            A = m[0],
                            C = m[m.length - 1],
                            E = function(t) {
                                var i = document.querySelector(e),
                                    n = document.activeElement === i,
                                    s = document.activeElement === A,
                                    r = document.activeElement === C;
                                if (n || s || r) {
                                    var l = t.which === o,
                                        c = t.which === a || t.shiftKey,
                                        d = !c && l;
                                    c && l && (s || n) ? (t.preventDefault(), C.focus()) : d && r && (t.preventDefault(), A.focus())
                                }
                            },
                            T = function() {
                                for (var t = 0; t < m.length; t++)
                                    if (m[t] === document.activeElement) { m[t + 1].focus(); break }
                            },
                            k = function() {
                                for (var t = 0; t < m.length; t++)
                                    if (m[t] === document.activeElement) { m[t - 1].focus(); break }
                            },
                            L = function(t) {
                                var e = document.activeElement === A,
                                    i = document.activeElement === C,
                                    n = t.which === s,
                                    a = t.which === r;
                                (n || a) && (t.preventDefault(), e && n ? C.focus() : i && a ? A.focus() : a ? T() : n && k())
                            };
                        return { start: function() { n ? document.addEventListener(c, L) : document.addEventListener(c, E) }, stop: function() { n ? document.removeEventListener(c, L) : document.removeEventListener(c, E) } }
                    }
                    w(v)
                } else w(u)
            }
        },
        T = function(t) {
            t.setAttribute(l.TABINDEX, "-1"), t.focus(), t.addEventListener(h, (function t(e) {
                var i = e.target;
                i.removeAttribute(l.TABINDEX), i.removeEventListener(h, t)
            }))
        },
        k = !!y && /(iphone|ipod|ipad)/i.test(navigator.userAgent);
    var L = "data-collapsible",
        S = "data-visible",
        D = "data-target",
        M = "aria-expanded",
        x = "aria-controls",
        P = "aria-hidden",
        O = "aria-labelledby",
        I = "is-ready",
        K = "is-visible",
        F = "height",
        q = "auto",
        B = "click",
        R = "transitionend",
        N = "Could not initialize collapsible; you must include a value for the 'data-collapsible' attribute.",
        V = function(t) { return "Could not find collapsible trigger with [data-target='".concat(t, "']; you can't have a collapsible without a trigger.") },
        H = function(t) { return "Could not find id on collapsible trigger with [data-target='".concat(t, "'].") },
        U = function(t) { return "Could not find collapsible content with id '".concat(t, "'; you can't have a collapsible without content.") },
        Y = function() {
            function t() {
                e(this, t), this._handleClick = function(t, e) {
                    var i = !1;

                    function n() { i = !1 }
                    return function() {
                        i || (
                            t.apply(this, arguments), i = !0, setTimeout(n, e))
                    }
                }(this._handleClick.bind(this), 500), this._handleExpandTransition = this._handleExpandTransition.bind(this), this._validate = this._validate.bind(this), this._teardown = this._teardown.bind(this), this._components = [], this._activeCollapsible = {}, this._activeTrigger = {}, this._activeContent = {}, this._activeId = "", this._nextAriaExpandedState = "", this._nextAriaHiddenState = ""
            }
            return n(t, [{ key: "start", value: function(t) { A({ id: t, attribute: L, thisArg: this }) } }, { key: "stop", value: function(t) { C({ id: t, attribute: L, thisArg: this, activeNodeKey: "_activeCollapsible" }) } }, {
                key: "_validate",
                value: function(t) {
                    var e = this._getCollapsibleData(t),
                        i = e.trigger,
                        n = e.id;
                    if (!n) return w(N), !1;
                    if (!i) return w(V(n)), !1;
                    if (!i.id) return w(H(n)), !1;
                    var a = "#".concat(n),
                        o = t.querySelector(a);
                    return o ? (i.setAttribute(x, n), o.setAttribute(O, i.id), "true" === t.getAttribute(S) ? (t.setAttribute(S, "true"), i.setAttribute(M, "true"), o.setAttribute(P, "false"), o.style[F] = "".concat(o.scrollHeight, "px"), o.classList.add(K)) : (t.setAttribute(S, "false"), i.setAttribute(M, "false"), o.setAttribute(P, "true")), requestAnimationFrame((function() { i.classList.add(I), o.classList.add(I) })), i.addEventListener(B, this._handleClick), !0) : (w(U(n)), !1)
                }
            }, { key: "_teardown", value: function(t) { this._getCollapsibleData(t).trigger.removeEventListener(B, this._handleClick) } }, { key: "_handleClick", value: function(t) { t.preventDefault(), this._activeTrigger = t.target, this._setIds(), this._setActiveCollapsible(), this._setActiveContent(), this._setNextVisibleState(), this._toggleCollapsible(), this._activeCollapsible = null } }, { key: "_handleExpandTransition", value: function() { this._activeContent.style[F] = q, this._activeContent.removeEventListener(R, this._handleExpandTransition) } }, {
                key: "_toggleCollapsible",
                value: function() {
                    this._activeCollapsible.setAttribute(S, this._nextAriaExpandedState), this._activeTrigger.setAttribute(M, this._nextAriaExpandedState), this._activeContent.setAttribute(P, this._nextAriaHiddenState);
                    var t = "".concat(this._activeContent.scrollHeight, "px");
                    if ("false" === this._activeCollapsible.getAttribute(S)) return this._collapsePanel(t);
                    this._expandPanel(t)
                }
            }, { key: "_expandPanel", value: function(t) { this._activeContent.style[F] = t, this._activeContent.classList.add(K), this._activeContent.addEventListener(R, this._handleExpandTransition) } }, { key: "_collapsePanel", value: function(t) { var e = this; return requestAnimationFrame((function() { e._activeContent.style[F] = t, requestAnimationFrame((function() { e._activeContent.style[F] = null, e._activeContent.classList.remove(K) })) })) } }, { key: "_getCollapsibleData", value: function(t) { var e = t.getAttribute(L); return { id: e, trigger: t.querySelector("[".concat(D, "='").concat(e, "']")) } } }, { key: "_setActiveContent", value: function() { this._activeContent = this._activeCollapsible.querySelector("#".concat(this._activeId)) } }, {
                key: "_setNextVisibleState",
                value: function() {
                    var t = this._activeCollapsible.getAttribute(S);
                    this._nextAriaExpandedState = "true" === t ? "false" : "true", this._nextAriaHiddenState = "false" === t ? "false" : "true"
                }
            }, { key: "_setIds", value: function() { this._activeId = this._activeTrigger.getAttribute(D) } }, { key: "_setActiveCollapsible", value: function() { this._activeCollapsible = document.querySelector("[".concat(L, "='").concat(this._activeId, "']")) } }]), t
        }(),
        z = 9,
        j = 16,
        G = 27,
        W = 38,
        X = 40,
        J = "data-dropdown",
        Q = "dropdown-menu",
        Z = "data-target",
        $ = "data-parent",
        tt = "data-visible",
        et = "tabindex",
        it = "aria-haspopup",
        nt = "aria-controls",
        at = "aria-labelledby",
        ot = "aria-expanded",
        st = "overlay-open",
        rt = "keydown",
        lt = "click",
        ct = "Could not setup dropdown. Make sure it has a valid [data-dropdown] attribute with a unique id as its value.",
        dt = function(t) { return "Could not find menu associated with ".concat(t, ".") },
        ht = function(t) { return "Could not find any list items associated with ".concat(t, ".") },
        ut = function(t) { return "Could not find any button or anchor elements associated with ".concat(t, ".") },
        vt = "Could not find dropdown button's [data-parent] attribute.",
        _t = function() {
            function t() { e(this, t), this._handleClick = this._handleClick.bind(this), this._handleFirstTabClose = this._handleFirstTabClose.bind(this), this._handleLastTabClose = this._handleLastTabClose.bind(this), this._handleArrowKeyPress = this._handleArrowKeyPress.bind(this), this._handleClose = this._handleClose.bind(this), this._handleEscapeKeyPress = this._handleEscapeKeyPress.bind(this), this._handleOffMenuClick = this._handleOffMenuClick.bind(this), this._validate = this._validate.bind(this), this._teardown = this._teardown.bind(this), this._components = [], this._activeDropdownId = "", this._activeDropdownAttr = "", this._activeDropdownMenuId = "", this._activeDropdown = null, this._activeTrigger = null, this._activeDropdownMenu = null, this._firstDropdownAction = null, this._lastDropdownAction = null, this._focusTrap = null, this._activeDropdownActions = [], this._allowFocusReturn = !0, this._dropdownContainerAttr = "[".concat(J, "]"), this._dropdownTargetAttr = "[".concat(Z, "]"), this._dropdownMenuClassName = ".".concat(Q) }
            return n(t, [{ key: "start", value: function(t) { A({ id: t, attribute: J, thisArg: this }) } }, { key: "stop", value: function(t) { C({ id: t, attribute: J, thisArg: this, activeNodeKey: "_activeDropdown", cancelActiveFn: "_closeActiveDropdown" }) } }, {
                key: "_validate",
                value: function(t) {
                    var e = t.getAttribute(J);
                    if (!e) return w(ct), !1;
                    var i = "[".concat(J, '="').concat(e, '"]'),
                        n = document.querySelector("[".concat(J, '="').concat(e, '"]')),
                        a = n.querySelector("[".concat(Z, "]"));
                    if (!a.getAttribute($)) return w(vt), !1;
                    var o = a.getAttribute(Z),
                        s = n.querySelector("#".concat(o));
                    if (!s) return w(dt(i)), !1;
                    if (s.setAttribute(at, a.id), a.setAttribute(nt, o), a.setAttribute(it, "true"), a.setAttribute(ot, "false"), !n.querySelectorAll("#".concat(o, " > li")).length) return w(ht(i)), !1;
                    var r = this._getDropdownActions(i, "#".concat(o));
                    return r.length ? (r.forEach((function(t) { t.setAttribute(et, "-1") })), a.addEventListener(lt, this._handleClick), a.addEventListener(rt, this._handleArrowKeyPress), !0) : (w(ut(i)), !1)
                }
            }, {
                key: "_teardown",
                value: function(t) {
                    var e = t.getAttribute(J),
                        i = t.querySelector("[".concat($, "='").concat(e, "']"));
                    i.removeEventListener(lt, this._handleClick), i.removeEventListener(rt, this._handleArrowKeyPress)
                }
            }, { key: "_handleClick", value: function(t, e) { t.preventDefault(), t.stopPropagation(), this._closeOpenDropdowns(t), this._activeTrigger = t.target, this._setActiveDropdownId(), this._setActiveDropdown(), this._setActiveDropdownMenu(), this._setVisibleState(), this._startActiveDropdownEvents(), e && e === W ? this._lastDropdownAction.focus() : this._firstDropdownAction.focus(), k && document.body.classList.add(st) } }, { key: "_handleClose", value: function() { this._allowFocusReturn && this._handleReturnFocus(), this._closeActiveDropdown() } }, {
                key: "_closeActiveDropdown",
                value: function() {
                    var t = this;
                    k && document.body.classList.remove(st), this._activeDropdown.setAttribute(tt, "false"), this._activeTrigger.setAttribute(ot, "false"), this._activeTrigger.removeEventListener(lt, this._handleClose), this._activeTrigger.addEventListener(lt, this._handleClick), document.removeEventListener(rt, this._handleEscapeKeyPress), document.removeEventListener(lt, this._handleOffMenuClick), this._firstDropdownAction.removeEventListener(rt, this._handleFirstTabClose), this._lastDropdownAction.removeEventListener(rt, this._handleLastTabClose), this._activeDropdownActions.forEach((function(e) { e.setAttribute(et, "-1"), e.removeEventListener(lt, t._handleClose) })), this._focusTrap.stop(), this._focusTrap = null, this._resetProperties()
                }
            }, { key: "_resetProperties", value: function() { this._activeDropdownId = "", this._activeDropdownAttr = "", this._activeDropdownMenuId = "", this._activeDropdown = null, this._activeTrigger = null, this._activeDropdownMenu = null, this._firstDropdownAction = null, this._lastDropdownAction = null, this._focusTrap = null, this._activeDropdownActions = [], this._allowFocusReturn = !0 } }, { key: "_setActiveDropdownId", value: function() { this._activeDropdownId = this._activeTrigger.getAttribute($) } }, {
                key: "_startActiveDropdownEvents",
                value: function() {
                    var t = this;
                    this._activeTrigger.removeEventListener(lt, this._handleClick), this._activeTrigger.addEventListener(lt, this._handleClose), document.addEventListener(rt, this._handleEscapeKeyPress), document.addEventListener(lt, this._handleOffMenuClick), this._activeDropdownActions = this._getDropdownActions(this._activeDropdownAttr, "#".concat(this._activeDropdownMenuId)), this._firstDropdownAction = this._activeDropdownActions[0], this._lastDropdownAction = this._activeDropdownActions[this._activeDropdownActions.length - 1], this._firstDropdownAction.addEventListener(rt, this._handleFirstTabClose), this._lastDropdownAction.addEventListener(rt, this._handleLastTabClose), this._activeDropdownActions.forEach((function(e) { e.setAttribute(et, "0"), e.addEventListener(lt, t._handleClose) }));
                    var e = "".concat(this._activeDropdownAttr, " > ").concat(this._dropdownMenuClassName);
                    this._focusTrap && this._focusTrap.stop(), this._focusTrap = E(e, { useArrows: !0 }), this._focusTrap.start()
                }
            }, { key: "_setVisibleState", value: function() { this._activeTrigger.setAttribute(ot, "true"), this._activeDropdown.setAttribute(tt, "true") } }, { key: "_setActiveDropdownMenu", value: function() { this._activeDropdownMenuId = this._activeTrigger.getAttribute(Z), this._activeDropdownMenu = this._activeDropdown.querySelector("#".concat(this._activeDropdownMenuId)) } }, { key: "_setActiveDropdown", value: function() { this._activeDropdownAttr = "[".concat(J, '="').concat(this._activeDropdownId, '"]'), this._activeDropdown = document.querySelector(this._activeDropdownAttr) } }, { key: "_closeOpenDropdowns", value: function(t) { this._activeTrigger && (this._allowFocusReturn = !1, this._handleClose(t), this._allowFocusReturn = !0) } }, {
                key: "_handleFirstTabClose",
                value: function(t) {
                    var e = t.which === j || t.shiftKey,
                        i = t.which === z;
                    e && i && this._handleClose(t)
                }
            }, {
                key: "_handleLastTabClose",
                value: function(t) {
                    var e = t.which === j || t.shiftKey;
                    t.which === z && !e && this._handleClose(t)
                }
            }, { key: "_handleArrowKeyPress", value: function(t) { t.which !== W && t.which !== X || this._handleClick(t, t.which) } }, { key: "_handleEscapeKeyPress", value: function(t) { t.which === G && this._handleClose(t) } }, { key: "_handleOffMenuClick", value: function(t) { t.target !== this._activeTrigger && t.target !== this._activeDropdownMenu && this._handleClose(t) } }, { key: "_handleReturnFocus", value: function() { this._activeTrigger && T(this._activeTrigger) } }, { key: "_getDropdownActions", value: function(t, e) { return p("".concat(t, " > ").concat(e, " > li > a, ").concat(t, " > ").concat(e, " > li > button")) } }]), t
        }(),
        ft = 27,
        pt = "data-modal",
        gt = "data-target",
        yt = "data-visible",
        bt = "data-close",
        mt = "data-parent",
        At = "aria-hidden",
        Ct = "aria-modal",
        wt = "role",
        Et = "tabindex",
        Tt = "no-scroll",
        kt = "is-visible",
        Lt = "overlay-open",
        St = "paddingRight",
        Dt = "paddingLeft",
        Mt = "keydown",
        xt = "click",
        Pt = "transitionend",
        Ot = function(t) { return "Could not find modal trigger with id ".concat(t, ".") },
        It = "Could not detect an id on your [data-modal] element. Please add a value matching the modal trigger's [data-parent] attribute.",
        Kt = function(t) { return "Could not find element with attribute [data-parent='".concat(t, "'].") },
        Ft = function() {
            function t() { e(this, t), this._handleClick = this._handleClick.bind(this), this._handleOpenTransition = this._handleOpenTransition.bind(this), this._handleCloseTransition = this._handleCloseTransition.bind(this), this._handleClose = this._handleClose.bind(this), this._handleOverlayClick = this._handleOverlayClick.bind(this), this._handleEscapeKeyPress = this._handleEscapeKeyPress.bind(this), this._validate = this._validate.bind(this), this._teardown = this._teardown.bind(this), this._components = [], this._activeModalTrigger = null, this._activeModalAttr = "", this._activeModal = null, this._activeModalContent = null, this._activeModalId = "", this._activeModalContentSelector = "", this._activeModalCloseTriggers = [], this._originalPagePadding = "", this._scrollbarOffset = null, this._focusTrap = null }
            return n(t, [{ key: "start", value: function(t) { A({ id: t, attribute: pt, thisArg: this }) } }, { key: "stop", value: function(t) { C({ id: t, attribute: pt, thisArg: this, activeNodeKey: "_activeModal", cancelActiveFn: "_closeActiveModal" }) } }, {
                key: "_validate",
                value: function(t) {
                    var e = t.getAttribute(pt);
                    if (!e) return w(It), !1;
                    var i = document.querySelector("[".concat(pt, "='").concat(e, "']")),
                        n = t.querySelector("[".concat(mt, "='").concat(e, "']"));
                    if (!n) return w(Kt(e)), !1;
                    i.setAttribute(At, "true"), i.setAttribute(yt, "false"), n.setAttribute(Ct, "true"), n.setAttribute(wt, "dialog");
                    var a = document.querySelector("[".concat(gt, "='").concat(e, "']"));
                    return a ? (a.addEventListener(xt, this._handleClick), !0) : (w(Ot(e)), !1)
                }
            }, {
                key: "_teardown",
                value: function(t) {
                    var e = t.getAttribute(pt);
                    document.querySelector("[".concat(gt, "='").concat(e, "']")).removeEventListener(xt, this._handleClick)
                }
            }, { key: "_handleClick", value: function(t) { t.preventDefault(), this._activeModalTrigger = t.target, this._setActiveId(), this._setActiveModal(), this._setActiveModalContent(), this._setScrollbarOffset(), this._setScrollStop(), this._focusTrap = E(this._activeModalContentSelector), this._focusTrap.start(), this._toggleVisibility(!0), this._setFocusableChildren(), this._setCloseTriggers(), this._startEvents() } }, { key: "_handleClose", value: function(t) { t.preventDefault(), this._closeActiveModal() } }, {
                key: "_closeActiveModal",
                value: function() {
                    var t = this;
                    this._toggleVisibility(!1), this._focusTrigger(), this._unsetScrollStop(), this._unsetScrollbarOffset(), document.removeEventListener(Mt, this._handleEscapeKeyPress), document.removeEventListener(xt, this._handleOverlayClick), this._activeModalCloseTriggers.forEach((function(e) { e.removeEventListener(xt, t._handleClose) })), this._focusTrap.stop(), this._resetProperties()
                }
            }, { key: "_resetProperties", value: function() { this._activeModal = null, this._activeModalTrigger = null, this._activeModalContent = null, this._activeModalId = "", this._activeModalContentSelector = "", this._activeModalCloseTriggers = [], this._originalPagePadding = "", this._scrollbarOffset = null, this._focusTrap = null } }, {
                key: "_setFocusableChildren",
                value: function() {
                    var t = g(this._activeModalContentSelector);
                    t.length && t.forEach((function(t) { return t.setAttribute(Et, "0") }))
                }
            }, { key: "_setCloseTriggers", value: function() { this._activeModalCloseTriggers = p("".concat(this._activeModalContentSelector, " [").concat(bt, "]")) } }, { key: "_setActiveId", value: function() { this._activeModalId = this._activeModalTrigger.getAttribute(gt) } }, { key: "_setActiveModal", value: function() { this._activeModalAttr = "[".concat(pt, "='").concat(this._activeModalId, "']"), this._activeModal = document.querySelector("[".concat(pt, "='").concat(this._activeModalId, "']")) } }, { key: "_setActiveModalContent", value: function() { this._activeModalContentSelector = "[".concat(mt, "='").concat(this._activeModalId, "']"), this._activeModalContent = this._activeModal.querySelector(this._activeModalContentSelector) } }, { key: "_handleOpenTransition", value: function() { this._activeModal.removeEventListener(Pt, this._handleOpenTransition), this._focusContent(), this._activeModal.scrollTop = 0 } }, { key: "_handleCloseTransition", value: function() { this._modalCache.style[Dt] = "", this._modalCache.removeEventListener(Pt, this._handleCloseTransition), this._modalCache = null } }, { key: "_toggleVisibility", value: function(t) { this._activeModal.setAttribute(At, t ? "false" : "true"), this._activeModal.setAttribute(yt, t ? "true" : "false"), t ? (this._activeModal.classList.add(kt), this._activeModal.addEventListener(Pt, this._handleOpenTransition)) : (this._modalCache = this._activeModal, this._activeModal.classList.remove(kt), this._activeModal.addEventListener(Pt, this._handleCloseTransition)) } }, {
                key: "_startEvents",
                value: function() {
                    var t = this;
                    document.addEventListener(Mt, this._handleEscapeKeyPress), document.addEventListener(xt, this._handleOverlayClick), this._activeModalCloseTriggers.forEach((function(e) { e.addEventListener(xt, t._handleClose) }))
                }
            }, { key: "_getScrollbarOffset", value: function() { return window.innerWidth - document.body.getBoundingClientRect().right } }, { key: "_setScrollbarOffset", value: function() { this._scrollbarIsVisible() && (this._scrollbarOffset = this._getScrollbarOffset(), this._originalPagePadding = document.body.style[St], document.body.style[St] = "".concat(this._scrollbarOffset, "px")) } }, { key: "_scrollbarIsVisible", value: function() { if ("number" == typeof window.innerWidth) return window.innerWidth > document.body.getBoundingClientRect().right } }, {
                key: "_unsetScrollbarOffset",
                value: function() {
                    if (this._activeModal) {
                        var t = this._originalPagePadding;
                        this._activeModal.style[Dt] = "".concat(this._scrollbarOffset, "px"), document.body.style[St] = t
                    }
                }
            }, { key: "_handleOverlayClick", value: function(t) { t.target === this._activeModal && this._handleClose(t) } }, { key: "_handleEscapeKeyPress", value: function(t) { t.which === ft && this._handleClose(t) } }, { key: "_focusContent", value: function() { T(this._activeModalContent) } }, { key: "_focusTrigger", value: function() { T(this._activeModalTrigger) } }, { key: "_unsetScrollStop", value: function() { k && document.body.classList.remove(Lt), document.body.classList.remove(Tt), document.documentElement.classList.remove(Tt) } }, { key: "_setScrollStop", value: function() { k && document.body.classList.add(Lt), document.body.classList.add(Tt), document.documentElement.classList.add(Tt) } }]), t
        }(),
        qt = 27,
        Bt = "data-tooltip",
        Rt = "data-visible",
        Nt = "data-target",
        Vt = "role",
        Ht = "aria-describedby",
        Ut = "is-drop-inline-start",
        Yt = "is-drop-inline-end",
        zt = "overlay-open",
        jt = "height",
        Gt = "width",
        Wt = "top",
        Xt = "left",
        Jt = "mouseover",
        Qt = "mouseout",
        Zt = "focus",
        $t = "blur",
        te = "keydown",
        ee = "Could not find tooltip id.",
        ie = function(t) { return "Could not find a tooltip trigger with attribute [data-target='".concat(t, "'].") },
        ne = function(t) { return "Could not find a tooltip with id '".concat(t, "'.") },
        ae = function() {
            function t() { e(this, t), this._handleEvent = this._handleEvent.bind(this), this._handleClose = this._handleClose.bind(this), this._handleEscapeKeyPress = this._handleEscapeKeyPress.bind(this), this._validate = this._validate.bind(this), this._teardown = this._teardown.bind(this), this._components = [], this._activeTrigger = null, this._activeTooltipBox = null }
            return n(t, [{ key: "start", value: function(t) { A({ id: t, attribute: Bt, thisArg: this }) } }, { key: "stop", value: function(t) { C({ id: t, attribute: Bt, thisArg: this, activeNodeKey: "_activeTooltip", cancelActiveFn: "_handleClose" }) } }, {
                key: "_validate",
                value: function(t) {
                    var e = t.getAttribute(Bt);
                    if (!e) return w(ee), !1;
                    var i = t.querySelector(this._getTrigger(e)),
                        n = t.querySelector("#".concat(e));
                    return i ? n ? (i.setAttribute(Ht, e), n.setAttribute(Vt, "tooltip"), i.addEventListener(Jt, this._handleEvent), i.addEventListener(Zt, this._handleEvent), !0) : (w(ne(e)), !1) : (w(ie(e)), !1)
                }
            }, {
                key: "_teardown",
                value: function(t) {
                    var e = t.getAttribute(Bt),
                        i = t.querySelector(this._getTrigger(e));
                    i.removeEventListener(Jt, this._handleEvent), i.removeEventListener(Zt, this._handleEvent)
                }
            }, {
                key: "_handleEvent",
                value: function(t) {
                    this._activeTooltip && this._handleClose(), this._activeTrigger = t.target;
                    var e = this._activeTrigger.getAttribute(Nt);
                    this._activeTooltip = document.querySelector("[".concat(Bt, "='").concat(e, "']")), this._activeTooltipBox = document.querySelector("#".concat(e)), this._hasInlineClass() ? this._alignTooltip(jt) : this._alignTooltip(Gt), this._setVisibleState(), this._startCloseEvents()
                }
            }, { key: "_handleClose", value: function() { this._activeTooltipBox && this._setHideState(), this._startOpenEvents(), this._resetProperties() } }, { key: "_resetProperties", value: function() { this._activeTooltip = null, this._activeTrigger = null, this._activeTooltipBox = null } }, { key: "_setVisibleState", value: function() { this._activeTooltipBox.setAttribute(Rt, "true") } }, { key: "_setHideState", value: function() { this._activeTooltipBox.setAttribute(Rt, "false") } }, { key: "_startCloseEvents", value: function() { this._activeTrigger.removeEventListener(Jt, this._handleEvent), this._activeTrigger.removeEventListener(Zt, this._handleEvent), this._activeTrigger.addEventListener(Qt, this._handleClose), this._activeTrigger.addEventListener($t, this._handleClose), document.addEventListener(te, this._handleEscapeKeyPress), k && document.body.classList.add(zt) } }, { key: "_handleEscapeKeyPress", value: function(t) { t.which === qt && this._handleClose() } }, { key: "_startOpenEvents", value: function() { this._activeTrigger && (this._activeTrigger.removeEventListener(Qt, this._handleClose), this._activeTrigger.removeEventListener($t, this._handleClose), this._activeTrigger.addEventListener(Jt, this._handleEvent), this._activeTrigger.addEventListener(Zt, this._handleEvent), document.removeEventListener(te, this._handleEscapeKeyPress), k && document.body.classList.remove(zt)) } }, {
                key: "_alignTooltip",
                value: function(t) {
                    var e = this._getSize(this._activeTrigger, t),
                        i = this._getSize(this._activeTooltipBox, t),
                        n = e > i ? (e - i) / 2 : (i - e) / -2;
                    t === jt ? this._activeTooltipBox.style[Wt] = "".concat(n, "px") : this._activeTooltipBox.style[Xt] = "".concat(n, "px")
                }
            }, { key: "_getTrigger", value: function(t) { return "[".concat(Nt, '="').concat(t, '"]') } }, { key: "_getSize", value: function(t, e) { return Math.floor(t.getBoundingClientRect()[e]) } }, { key: "_hasInlineClass", value: function() { var t = this._activeTooltipBox.classList; return t.contains(Ut) || t.contains(Yt) } }]), t
        }(),
        oe = new Y,
        se = new _t,
        Undernet = {
            Modals: new Ft,
            Collapsibles: oe,
            Dropdowns: se,
            Tooltips: new ae,
            createFocusTrap: E,
            createFocusRing: function() {
                if (y) {
                    var t, e = function e() { document.body.classList.add(l.KEYBOARD_CLASS), document.removeEventListener(c, e), document.addEventListener(d, i), t = !1 },
                        i = function i() { document.body.classList.remove(l.KEYBOARD_CLASS), document.removeEventListener(d, i), document.addEventListener(c, e), t = !0 };
                    return { start: function() { document.addEventListener(c, e) }, stop: function() { t ? document.removeEventListener(c, e) : (document.body.classList.remove(l.KEYBOARD_CLASS), document.removeEventListener(d, i)) } }
                }
            }
        },
        re = Undernet.createFocusRing();
    Undernet.start = function(t) {
        var e = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
        Undernet.Modals.start(t), Undernet.Collapsibles.start(t), Undernet.Dropdowns.start(t), Undernet.Tooltips.start(t), e && re.start()
    }, Undernet.stop = function(t) {
        var e = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
        Undernet.Modals.stop(t), Undernet.Collapsibles.stop(t), Undernet.Dropdowns.stop(t), Undernet.Tooltips.stop(t), e && re.stop()
    }, y && (window.Undernet = Undernet)
}));
//# sourceMappingURL=undernet.bundle.min.js.map